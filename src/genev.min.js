"use strict";(function(){var root=this;var prevGenev=root.genev;var genev=function(CHROMO_STRUCTURE,options){var clone=function(obj){return JSON.parse(JSON.stringify(obj))};var extend=function(){var objct,property,src,ncopy,original=arguments[0]||{},i=1,length=arguments.length;if(typeof original!=="object"){original={}}if(i===length){return original}for(;i<length;i++){if((objct=arguments[i])!=null){for(property in objct){src=original[property];ncopy=objct[property];if(original===ncopy){continue}if(ncopy!==undefined){original[property]=ncopy}}}}return original};if(typeof CHROMO_STRUCTURE==="undefined"||typeof CHROMO_STRUCTURE!=="object"||CHROMO_STRUCTURE===null){return null}if(typeof CHROMO_STRUCTURE.genes==="undefined"){var genes=clone(CHROMO_STRUCTURE);CHROMO_STRUCTURE={genes:genes}}if(Object.keys(CHROMO_STRUCTURE.genes).length<1){return null}var gfprivate={};gfprivate.CHROMO_STRUCTURE=CHROMO_STRUCTURE;gfprivate.DEFAULT_OPTIONS={maxPopulation:45,maxGenerations:1e3,mutationProb:.05,numToSelect:10,elitism:true,exitScore:-1};gfprivate.maxPopulation=45;gfprivate.maxGenerations=100;gfprivate.mutationProb=.05;gfprivate.numToSelect=10;gfprivate.elitism=true;gfprivate.elite={};gfprivate.chromosome={genes:{},score:0,generation:0};gfprivate.population=[];gfprivate.sortPopulation=function(){gfprivate.population.sort(function(a,b){return b.score-a.score})};gfprivate.crossover=function(Xchromo,Ychromo){var crossedChromo=extend({},gfprivate.chromosome),property;for(property in Xchromo.genes){if(Xchromo.genes.hasOwnProperty(property)){crossedChromo.genes[property]=Math.random()>.5?Xchromo.genes[property]:Ychromo.genes[property]}}crossedChromo.generation=Xchromo.generation+1;return extend({},crossedChromo)};gfprivate.getMutated=function(chromo){var mutatedChromo=extend({},chromo),property;for(property in chromo.genes){if(chromo.genes.hasOwnProperty(property)){mutatedChromo.genes[property]=Math.random()<gfprivate.mutationProb?Math.random():chromo.genes[property]}}return mutatedChromo};gfprivate.newChromosome=function(){var newChromosome=extend({},gfprivate.chromosome),property;newChromosome.genes=gfprivate.CHROMO_STRUCTURE.genes;for(property in newChromosome.genes){if(newChromosome.genes.hasOwnProperty(property)){newChromosome.genes[property]=Math.random()}}return newChromosome};gfprivate.fitnessFunction=function(genes){var property;for(property in genes){if(genes.hasOwnProperty(property)){return genes[property]}}};gfprivate.evaluate=function(){for(var i=0;i<gfprivate.population.length;i+=1){var score={score:gfprivate.fitnessFunction(gfprivate.population[i].genes)};extend(gfprivate.population[i],score)}gfprivate.sortPopulation()};gfprivate.selectFittest=function(){if(gfprivate.numToSelect>0){gfprivate.population.splice(gfprivate.numToSelect)}else{gfprivate.population.splice(1)}gfprivate.elite=clone(gfprivate.population[0]);gfprivate.elite.generation+=1};gfprivate.selectRandom=function(selectionPop){var numToSelect=selectionPop.length<gfprivate.maxPopulation?selectionPop.length:gfprivate.maxPopulation;gfprivate.population=[];for(var i=0;i<numToSelect;i+=1){var selector=Math.floor(Math.random()*selectionPop.length);gfprivate.population.push(clone(extend({},selectionPop[selector])))}var restNum=gfprivate.maxPopulation-selectionPop.length;for(var i=0;i<restNum;i+=1){gfprivate.population.push(clone(gfprivate.newChromosome()))}};gfprivate.extend=function(options){extend(gfprivate,options);if(gfprivate.maxPopulation<10){gfprivate.maxPopulation=10}else if(gfprivate.numToSelect<1){gfprivate.numToSelect=1}};gfprivate.crossPopulation=function(){var crossoverPopulation=[];for(var i=0;i<gfprivate.population.length;i+=1){for(var ii=1;ii<gfprivate.population.length-i;ii+=1){var crossoverChromosome=extend({},gfprivate.crossover(gfprivate.population[i],gfprivate.population[ii]));crossoverPopulation.push(clone(crossoverChromosome))}gfprivate.population[i].generation+=1;crossoverPopulation.push(clone(gfprivate.population[i]))}gfprivate.selectRandom(crossoverPopulation)};gfprivate.mutatePopulation=function(){for(var i=0;i<gfprivate.population.length;i+=1){gfprivate.population[i]=clone(gfprivate.getMutated(gfprivate.population[i]))}};gfprivate.initRandomPop=function(){for(var i=0;i<gfprivate.maxPopulation;i+=1){var newChromosome=extend(true,{},gfprivate.newChromosome());gfprivate.population.push(newChromosome)}};gfprivate.exitScoreReached=function(){if(gfprivate.exitScore!==-1){if(gfprivate.population[0].score>=gfprivate.exitScore){return true}}return false};gfprivate.onNewGen=function(population){return};var gfpublic={};gfpublic.initPopulation=function(initpop,validate){if(typeof initpop!=="undefined"){if(typeof validate!=="undefined"&&validate===true){for(var i=0;i<initpop;i+=1){var property;if(typeof initpop[i].genes==="undefined"){return}for(property in gfprivate.CHROMO_STRUCTURE){if(typeof initpop[i].genes[property]==="undefined"){return}}}}gfprivate.population=[];gfprivate.population.push(initpop)}gfprivate.initRandomPop()};gfpublic.evolve=function(fitfunc,evolveOptions){gfprivate.extend(evolveOptions);var generationCount=gfprivate.maxGenerations;if(typeof fitfunc==="function"){gfprivate.fitnessFunction=fitfunc}if(gfprivate.population.length==0){return}while(generationCount--){gfprivate.evaluate();if(typeof gfprivate.onNewGen==="function"){gfprivate.onNewGen(gfprivate.population)}gfprivate.selectFittest();if(gfprivate.exitScoreReached()){break}gfprivate.crossPopulation();gfprivate.mutatePopulation();gfprivate.population.push(gfprivate.elite)}gfprivate.evaluate();gfprivate.selectFittest()};gfpublic.resetOptions=function(){gfprivate.extend(gfprivate.DEFAULT_OPTIONS)};gfpublic.getPopulation=function(){return gfprivate.population};gfpublic.resetOptions();gfprivate.extend(options);return gfpublic};genev.noConflict=function(){root.genev=prevGenev;return genev};if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports){exports=module.exports=genev}exports.genev=genev}else{root.genev=genev}}).call(this);
//# sourceMappingURL=src/genev.min.js.map